{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11070\\\\source\\\\repos\\\\Reactjs\\\\reactapp\\\\src\\\\ui\\\\Colordropdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorDropdown = () => {\n  _s();\n  // Define the color array with color names and their respective hex values\n  const colors = [{\n    name: 'Red',\n    hex: '#FF0000'\n  }, {\n    name: 'Green',\n    hex: '#00FF00'\n  }, {\n    name: 'Blue',\n    hex: '#0000FF'\n  }, {\n    name: 'Yellow',\n    hex: '#FFFF00'\n  }, {\n    name: 'Purple',\n    hex: '#800080'\n  }];\n\n  // State to manage selected colors\n  const [selectedColors, setSelectedColors] = useState([]);\n\n  // Handle the selection of colors\n  const handleColorSelect = color => {\n    if (!selectedColors.includes(color)) {\n      setSelectedColors([...selectedColors, color]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleColorSelect(color.hex),\n        style: {\n          backgroundColor: color.hex,\n          width: '50px',\n          height: '50px',\n          display: 'inline-block',\n          cursor: 'pointer',\n          margin: '5px',\n          border: selectedColors.includes(color.hex) ? '3px solid black' : '1px solid #ccc'\n        },\n        title: color.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Colors:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: selectedColors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: color,\n            width: '50px',\n            height: '50px',\n            marginRight: '10px',\n            border: '1px solid #ccc'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(ColorDropdown, \"svo+NAKBs1jjxhsdw5Q2WgoLQGw=\");\n_c = ColorDropdown;\nexport default ColorDropdown;\nvar _c;\n$RefreshReg$(_c, \"ColorDropdown\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ColorDropdown","_s","colors","name","hex","selectedColors","setSelectedColors","handleColorSelect","color","includes","children","style","marginBottom","map","index","onClick","backgroundColor","width","height","display","cursor","margin","border","title","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/11070/source/repos/Reactjs/reactapp/src/ui/Colordropdown.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ColorDropdown = () => {\r\n    // Define the color array with color names and their respective hex values\r\n    const colors = [\r\n        { name: 'Red', hex: '#FF0000' },\r\n        { name: 'Green', hex: '#00FF00' },\r\n        { name: 'Blue', hex: '#0000FF' },\r\n        { name: 'Yellow', hex: '#FFFF00' },\r\n        { name: 'Purple', hex: '#800080' },\r\n    ];\r\n\r\n    // State to manage selected colors\r\n    const [selectedColors, setSelectedColors] = useState([]);\r\n\r\n    // Handle the selection of colors\r\n    const handleColorSelect = (color) => {\r\n        if (!selectedColors.includes(color)) {\r\n            setSelectedColors([...selectedColors, color]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Custom dropdown */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n                {colors.map((color, index) => (\r\n                    <div\r\n                        key={index}\r\n                        onClick={() => handleColorSelect(color.hex)}\r\n                        style={{\r\n                            backgroundColor: color.hex,\r\n                            width: '50px',\r\n                            height: '50px',\r\n                            display: 'inline-block',\r\n                            cursor: 'pointer',\r\n                            margin: '5px',\r\n                            border: selectedColors.includes(color.hex) ? '3px solid black' : '1px solid #ccc',\r\n                        }}\r\n                        title={color.name}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Display selected colors */}\r\n            <div>\r\n                <h3>Selected Colors:</h3>\r\n                <div style={{ display: 'flex' }}>\r\n                    {selectedColors.map((color, index) => (\r\n                        <div\r\n                            key={index}\r\n                            style={{\r\n                                backgroundColor: color,\r\n                                width: '50px',\r\n                                height: '50px',\r\n                                marginRight: '10px',\r\n                                border: '1px solid #ccc',\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorDropdown;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA,MAAMC,MAAM,GAAG,CACX;IAAEC,IAAI,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAU,CAAC,EAC/B;IAAED,IAAI,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAU,CAAC,EACjC;IAAED,IAAI,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAU,CAAC,EAChC;IAAED,IAAI,EAAE,QAAQ;IAAEC,GAAG,EAAE;EAAU,CAAC,EAClC;IAAED,IAAI,EAAE,QAAQ;IAAEC,GAAG,EAAE;EAAU,CAAC,CACrC;;EAED;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMU,iBAAiB,GAAIC,KAAK,IAAK;IACjC,IAAI,CAACH,cAAc,CAACI,QAAQ,CAACD,KAAK,CAAC,EAAE;MACjCF,iBAAiB,CAAC,CAAC,GAAGD,cAAc,EAAEG,KAAK,CAAC,CAAC;IACjD;EACJ,CAAC;EAED,oBACIT,OAAA;IAAAW,QAAA,gBAEIX,OAAA;MAAKY,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAF,QAAA,EAChCR,MAAM,CAACW,GAAG,CAAC,CAACL,KAAK,EAAEM,KAAK,kBACrBf,OAAA;QAEIgB,OAAO,EAAEA,CAAA,KAAMR,iBAAiB,CAACC,KAAK,CAACJ,GAAG,CAAE;QAC5CO,KAAK,EAAE;UACHK,eAAe,EAAER,KAAK,CAACJ,GAAG;UAC1Ba,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE,cAAc;UACvBC,MAAM,EAAE,SAAS;UACjBC,MAAM,EAAE,KAAK;UACbC,MAAM,EAAEjB,cAAc,CAACI,QAAQ,CAACD,KAAK,CAACJ,GAAG,CAAC,GAAG,iBAAiB,GAAG;QACrE,CAAE;QACFmB,KAAK,EAAEf,KAAK,CAACL;MAAK,GAXbW,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYR,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAGN5B,OAAA;MAAAW,QAAA,gBACIX,OAAA;QAAAW,QAAA,EAAI;MAAgB;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB5B,OAAA;QAAKY,KAAK,EAAE;UAAEQ,OAAO,EAAE;QAAO,CAAE;QAAAT,QAAA,EAC3BL,cAAc,CAACQ,GAAG,CAAC,CAACL,KAAK,EAAEM,KAAK,kBAC7Bf,OAAA;UAEIY,KAAK,EAAE;YACHK,eAAe,EAAER,KAAK;YACtBS,KAAK,EAAE,MAAM;YACbC,MAAM,EAAE,MAAM;YACdU,WAAW,EAAE,MAAM;YACnBN,MAAM,EAAE;UACZ;QAAE,GAPGR,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQR,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC1B,EAAA,CA9DID,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAgEnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}