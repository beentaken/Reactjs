{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11070\\\\source\\\\repos\\\\Reactjs\\\\reactapp\\\\src\\\\ui\\\\FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [jsonDataCvs, setJsonDataCvs] = useState(null);\n  const [jsonDataExcel, setJsonDataExcel] = useState(null);\n  const postDataToAPI = async data => {\n    try {\n      const response = await fetch('weatherforecast/PostExcel', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data) // Send data as JSON string\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post data');\n      }\n      const responseData = await response.json();\n      console.log('Response from server:', responseData);\n      setJsonData(responseData); // Display server response if needed\n    } catch (error) {\n      console.error('Error posting data:', error);\n    }\n  };\n\n  // Function to handle file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        const fileContent = e.target.result;\n\n        // Convert Excel/CSV content to JSON\n        const jsonResult = excelToJson(fileContent);\n\n        // Now post the converted JSON data\n        postDataToAPI(jsonResult);\n      };\n      reader.readAsText(file); // Read file as text\n    }\n    ///////////////////////////\n\n    const reader1 = new FileReader();\n\n    // On file load, read the file's content\n    reader1.onload = e => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n\n      // Get the first sheet's name\n      const firstSheetName = workbook.SheetNames[0];\n      // Get the first sheet\n      const worksheet = workbook.Sheets[firstSheetName];\n      // Convert the sheet to JSON\n      const json = XLSX.utils.sheet_to_json(worksheet);\n      postDataToAPI(json);\n      // Set the converted JSON data\n      setJsonData(json);\n    };\n    reader1.readAsArrayBuffer(file);\n  };\n\n  // Convert CSV-like Excel file to JSON manually\n  const excelToJson = csvContent => {\n    const lines = csvContent.split(\"\\n\");\n    const result = [];\n    const headers = lines[0].split(\",\");\n    for (let i = 1; i < lines.length; i++) {\n      const obj = {};\n      const currentLine = lines[i].split(\",\");\n      headers.forEach((header, index) => {\n        obj[header.trim()] = currentLine[index] ? currentLine[index].trim() : \"\";\n      });\n      result.push(obj);\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      accept: \".csv, .xls, .xlsx\",\n      style: {\n        display: 'none'\n      },\n      id: \"excel-file-upload\",\n      type: \"file\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"excel-file-upload\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        component: \"span\",\n        children: \"Upload Excel File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), jsonDataCvs && /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: JSON.stringify(jsonDataCvs, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this), jsonDataCvs && /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: JSON.stringify(jsonDataCvs, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(FileUpload, \"ye6ZnqqUQHdrhq1lUIPra9RFjSo=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","Button","XLSX","jsxDEV","_jsxDEV","FileUpload","_s","jsonDataCvs","setJsonDataCvs","jsonDataExcel","setJsonDataExcel","postDataToAPI","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","responseData","json","console","log","setJsonData","error","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","fileContent","result","jsonResult","excelToJson","readAsText","reader1","Uint8Array","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","utils","sheet_to_json","readAsArrayBuffer","csvContent","lines","split","i","length","obj","currentLine","forEach","header","index","trim","push","children","accept","style","display","id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","variant","component","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/11070/source/repos/Reactjs/reactapp/src/ui/FileUpload.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@mui/material';\r\nimport * as XLSX from 'xlsx';\r\nconst FileUpload = () => {\r\n    const [jsonDataCvs, setJsonDataCvs] = useState(null);\r\n    const [jsonDataExcel, setJsonDataExcel] = useState(null);\r\n    const postDataToAPI = async (data) => {\r\n        try {\r\n            const response = await fetch('weatherforecast/PostExcel', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data), // Send data as JSON string\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to post data');\r\n            }\r\n\r\n            const responseData = await response.json();\r\n            console.log('Response from server:', responseData);\r\n            setJsonData(responseData); // Display server response if needed\r\n        } catch (error) {\r\n            console.error('Error posting data:', error);\r\n        }\r\n    };\r\n\r\n    // Function to handle file upload\r\n    const handleFileUpload = (event) => {\r\n        const file = event.target.files[0];\r\n\r\n        if (file) {\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = function (e) {\r\n                const fileContent = e.target.result;\r\n\r\n                // Convert Excel/CSV content to JSON\r\n                const jsonResult = excelToJson(fileContent);\r\n\r\n                // Now post the converted JSON data\r\n                postDataToAPI(jsonResult);\r\n            };\r\n\r\n            reader.readAsText(file); // Read file as text\r\n        }\r\n        ///////////////////////////\r\n\r\n        const reader1 = new FileReader();\r\n\r\n        // On file load, read the file's content\r\n        reader1.onload = (e) => {\r\n            const data = new Uint8Array(e.target.result);\r\n            const workbook = XLSX.read(data, { type: 'array' });\r\n\r\n            // Get the first sheet's name\r\n            const firstSheetName = workbook.SheetNames[0];\r\n            // Get the first sheet\r\n            const worksheet = workbook.Sheets[firstSheetName];\r\n            // Convert the sheet to JSON\r\n            const json = XLSX.utils.sheet_to_json(worksheet);\r\n            postDataToAPI(json);\r\n            // Set the converted JSON data\r\n            setJsonData(json);\r\n        };\r\n\r\n        reader1.readAsArrayBuffer(file);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n    // Convert CSV-like Excel file to JSON manually\r\n    const excelToJson = (csvContent) => {\r\n        const lines = csvContent.split(\"\\n\");\r\n        const result = [];\r\n        const headers = lines[0].split(\",\");\r\n\r\n        for (let i = 1; i < lines.length; i++) {\r\n            const obj = {};\r\n            const currentLine = lines[i].split(\",\");\r\n\r\n            headers.forEach((header, index) => {\r\n                obj[header.trim()] = currentLine[index] ? currentLine[index].trim() : \"\";\r\n            });\r\n\r\n            result.push(obj);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                accept=\".csv, .xls, .xlsx\"\r\n                style={{ display: 'none' }}\r\n                id=\"excel-file-upload\"\r\n                type=\"file\"\r\n                onChange={handleFileUpload}\r\n            />\r\n            <label htmlFor=\"excel-file-upload\">\r\n                <Button variant=\"contained\" component=\"span\">\r\n                    Upload Excel File\r\n                </Button>\r\n            </label>\r\n\r\n            {/* Display JSON data if available */}\r\n            {jsonDataCvs && (\r\n                <pre style={{ marginTop: '20px' }}>\r\n                    {JSON.stringify(jsonDataCvs, null, 2)}\r\n                </pre>\r\n            )}\r\n            {/* Display JSON data if available */}\r\n            {jsonDataCvs && (\r\n                <pre style={{ marginTop: '20px' }}>\r\n                    {JSON.stringify(jsonDataCvs, null, 2)}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}