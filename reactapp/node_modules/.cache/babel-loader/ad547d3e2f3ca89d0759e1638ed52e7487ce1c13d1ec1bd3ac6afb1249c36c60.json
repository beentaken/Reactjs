{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11070\\\\source\\\\repos\\\\Reactjs\\\\reactapp\\\\src\\\\ui\\\\Colordropdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorDropdown = () => {\n  _s();\n  // Define the color array with their respective hex values\n  const colors = [{\n    name: 'Red',\n    hex: '#FF0000'\n  }, {\n    name: 'Green',\n    hex: '#00FF00'\n  }, {\n    name: 'Blue',\n    hex: '#0000FF'\n  }, {\n    name: 'Yellow',\n    hex: '#FFFF00'\n  }, {\n    name: 'Purple',\n    hex: '#800080'\n  }];\n\n  // State to manage selected color\n  const [selectedColor, setSelectedColor] = useState(null);\n\n  // Handle the selection of a color\n  const handleColorSelect = color => {\n    setSelectedColor(color);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: selectedColor ? selectedColor.hex : '#ffffff',\n          width: '100px',\n          height: '30px',\n          border: '1px solid #ccc',\n          cursor: 'pointer'\n        },\n        onClick: () => document.getElementById('color-dropdown').classList.toggle('show')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"color-dropdown\",\n        style: {\n          display: 'none',\n          position: 'absolute',\n          backgroundColor: '#f9f9f9',\n          boxShadow: '0px 8px 16px 0px rgba(0,0,0,0.2)',\n          zIndex: 1,\n          width: '100px'\n        },\n        children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleColorSelect(color),\n          style: {\n            backgroundColor: color.hex,\n            width: '100px',\n            height: '30px',\n            cursor: 'pointer'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        #color-dropdown.show {\n          display: block;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(ColorDropdown, \"O2SVOtLuBIcsXa8FF5zTO55POFk=\");\n_c = ColorDropdown;\nexport default ColorDropdown;\nvar _c;\n$RefreshReg$(_c, \"ColorDropdown\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ColorDropdown","_s","colors","name","hex","selectedColor","setSelectedColor","handleColorSelect","color","children","style","position","display","backgroundColor","width","height","border","cursor","onClick","document","getElementById","classList","toggle","fileName","_jsxFileName","lineNumber","columnNumber","id","boxShadow","zIndex","map","index","_c","$RefreshReg$"],"sources":["C:/Users/11070/source/repos/Reactjs/reactapp/src/ui/Colordropdown.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ColorDropdown = () => {\r\n    // Define the color array with their respective hex values\r\n    const colors = [\r\n        { name: 'Red', hex: '#FF0000' },\r\n        { name: 'Green', hex: '#00FF00' },\r\n        { name: 'Blue', hex: '#0000FF' },\r\n        { name: 'Yellow', hex: '#FFFF00' },\r\n        { name: 'Purple', hex: '#800080' },\r\n    ];\r\n\r\n    // State to manage selected color\r\n    const [selectedColor, setSelectedColor] = useState(null);\r\n\r\n    // Handle the selection of a color\r\n    const handleColorSelect = (color) => {\r\n        setSelectedColor(color);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Custom dropdown */}\r\n            <div style={{ position: 'relative', display: 'inline-block' }}>\r\n                <div\r\n                    style={{\r\n                        backgroundColor: selectedColor ? selectedColor.hex : '#ffffff',\r\n                        width: '100px',\r\n                        height: '30px',\r\n                        border: '1px solid #ccc',\r\n                        cursor: 'pointer',\r\n                    }}\r\n                    onClick={() => document.getElementById('color-dropdown').classList.toggle('show')}\r\n                ></div>\r\n                <div\r\n                    id=\"color-dropdown\"\r\n                    style={{\r\n                        display: 'none',\r\n                        position: 'absolute',\r\n                        backgroundColor: '#f9f9f9',\r\n                        boxShadow: '0px 8px 16px 0px rgba(0,0,0,0.2)',\r\n                        zIndex: 1,\r\n                        width: '100px',\r\n                    }}\r\n                >\r\n                    {colors.map((color, index) => (\r\n                        <div\r\n                            key={index}\r\n                            onClick={() => handleColorSelect(color)}\r\n                            style={{\r\n                                backgroundColor: color.hex,\r\n                                width: '100px',\r\n                                height: '30px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <style>{`\r\n        #color-dropdown.show {\r\n          display: block;\r\n        }\r\n      `}</style>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorDropdown;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA,MAAMC,MAAM,GAAG,CACX;IAAEC,IAAI,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAU,CAAC,EAC/B;IAAED,IAAI,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAU,CAAC,EACjC;IAAED,IAAI,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAU,CAAC,EAChC;IAAED,IAAI,EAAE,QAAQ;IAAEC,GAAG,EAAE;EAAU,CAAC,EAClC;IAAED,IAAI,EAAE,QAAQ;IAAEC,GAAG,EAAE;EAAU,CAAC,CACrC;;EAED;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAMU,iBAAiB,GAAIC,KAAK,IAAK;IACjCF,gBAAgB,CAACE,KAAK,CAAC;EAC3B,CAAC;EAED,oBACIT,OAAA;IAAAU,QAAA,gBAEIV,OAAA;MAAKW,KAAK,EAAE;QAAEC,QAAQ,EAAE,UAAU;QAAEC,OAAO,EAAE;MAAe,CAAE;MAAAH,QAAA,gBAC1DV,OAAA;QACIW,KAAK,EAAE;UACHG,eAAe,EAAER,aAAa,GAAGA,aAAa,CAACD,GAAG,GAAG,SAAS;UAC9DU,KAAK,EAAE,OAAO;UACdC,MAAM,EAAE,MAAM;UACdC,MAAM,EAAE,gBAAgB;UACxBC,MAAM,EAAE;QACZ,CAAE;QACFC,OAAO,EAAEA,CAAA,KAAMC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChF,CAAC,eACP3B,OAAA;QACI4B,EAAE,EAAC,gBAAgB;QACnBjB,KAAK,EAAE;UACHE,OAAO,EAAE,MAAM;UACfD,QAAQ,EAAE,UAAU;UACpBE,eAAe,EAAE,SAAS;UAC1Be,SAAS,EAAE,kCAAkC;UAC7CC,MAAM,EAAE,CAAC;UACTf,KAAK,EAAE;QACX,CAAE;QAAAL,QAAA,EAEDP,MAAM,CAAC4B,GAAG,CAAC,CAACtB,KAAK,EAAEuB,KAAK,kBACrBhC,OAAA;UAEImB,OAAO,EAAEA,CAAA,KAAMX,iBAAiB,CAACC,KAAK,CAAE;UACxCE,KAAK,EAAE;YACHG,eAAe,EAAEL,KAAK,CAACJ,GAAG;YAC1BU,KAAK,EAAE,OAAO;YACdC,MAAM,EAAE,MAAM;YACdE,MAAM,EAAE;UACZ;QAAE,GAPGc,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQR,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEN3B,OAAA;MAAAU,QAAA,EAAS;AACrB;AACA;AACA;AACA;IAAO;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEd,CAAC;AAACzB,EAAA,CAjEID,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAmEnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}